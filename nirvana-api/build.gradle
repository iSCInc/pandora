apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = 1.8
group = "com.wikia.nirvana"
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    // these are the dependencies for the generated code
    String jacksonVersion = '2.1.4'

    compile "com.wordnik:swagger-annotations:1.5.0-M1"
    compile "org.glassfish.jersey.core:jersey-client:2.15"
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.1.5"
    compile "joda-time:joda-time:2.3"
}

task generateNirvanaApi(type: GenerateNirvanaTask) {
    hostReplace = project.hasProperty("NIRVANA_API_HOST") ? NIRVANA_API_HOST : hostReplace
    swaggerJsonUrl = project.hasProperty("SWAGGER_JSON_URL") ? SWAGGER_JSON_URL : swaggerJsonUrl
    rootDir = projectDir
}

clean << {
    new AntBuilder().delete(dir: "${projectDir}/src")
}

compileJava.dependsOn('generateNirvanaApi')

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.util.AntBuilder

class GenerateNirvanaTask extends DefaultTask {
    String swaggerJsonUrl = "https://raw.githubusercontent.com/Wikia/app/dev/includes/wikia/api/swagger/nirvana.json"
    String codegenJar = 'http://pkg-s2.wikia-prod:81/repository/snapshots/com/wikia/swagger/swagger-codegen/1.0.1-SNAPSHOT/swagger-codegen-1.0.1-20150204.214328-1.jar'
    String rootDir = "."
    String codegenSubdir = "codegen"
    String hostReplace = null

    @TaskAction
    def generate() {
        if (new File("${rootDir}/src").exists()) {
            // specifying an output directory does not seem to work when compiling from a project
            // that depends on this
            throw new StopExecutionException()
        }

        String json = replaceHost(downloadSwaggerJson())
        generateCode(saveFile(json))
    }

    def downloadSwaggerJson() {
        return new URL(swaggerJsonUrl).getText()
    }

    def replaceHost(String json) {
        if (hostReplace == null) {
            return json
        }

        JsonSlurper slurper = new JsonSlurper()
        def swaggerObj = slurper.parseText(json)
        swaggerObj.host = hostReplace

        return JsonOutput.toJson(swaggerObj)
    }

    def saveFile(String json) {
        String filename = swaggerJsonUrl.tokenize("/")[-1]
        File file = new File("${rootDir}/${filename}")
        file.write(json)

        return file
    }

    def generateCode(File nirvanaFile) {
        String jarDownloadDestination = getCodegenDir()+"/"+codegenJar.tokenize('/')[-1]

        new AntBuilder().sequential {
            delete(dir: getCodegenDir())
            mkdir(dir: getCodegenDir())
            get(src: codegenJar, dest: jarDownloadDestination)
            exec(executable: 'java') {
                arg(line: "-cp ${getCodegenDir()}/* com.wordnik.swagger.codegen.Codegen")
                arg(line: "-i ${nirvanaFile.getAbsolutePath()}")
                arg(line: "-l com.wikia.codegen.WikiaJavaClientCodegen")
                arg(line: "-o ${rootDir}")
            }
            delete(dir: getCodegenDir())
            delete(file: nirvanaFile.getAbsolutePath())
            delete(file: "${rootDir}/pom.xml")
        }
    }

    def getCodegenDir() {
        return "${rootDir}/${codegenSubdir}"
    }
}
